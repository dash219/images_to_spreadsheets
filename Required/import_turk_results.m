function imagetagging = import_turk_results(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   IMAGETAGGING = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   IMAGETAGGING = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   imagetagging = importfile('image_tagging.results', 2, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/03/21 16:50:02

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[6,8,9,10,11,15,16]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [6,8,9,10,11,15,16]);
rawCellColumns = raw(:, [1,2,3,4,5,7,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30]);


%% Create output variable
imagetagging = table;
imagetagging.hitid = rawCellColumns(:, 1);
imagetagging.hittypeid = rawCellColumns(:, 2);
imagetagging.title = rawCellColumns(:, 3);
imagetagging.description = rawCellColumns(:, 4);
imagetagging.keywords = rawCellColumns(:, 5);
imagetagging.reward = cell2mat(rawNumericColumns(:, 1));
imagetagging.creationtime = rawCellColumns(:, 6);
imagetagging.assignments = cell2mat(rawNumericColumns(:, 2));
imagetagging.numavailable = cell2mat(rawNumericColumns(:, 3));
imagetagging.numpending = cell2mat(rawNumericColumns(:, 4));
imagetagging.numcomplete = cell2mat(rawNumericColumns(:, 5));
imagetagging.hitstatus = rawCellColumns(:, 7);
imagetagging.reviewstatus = rawCellColumns(:, 8);
imagetagging.annotation = rawCellColumns(:, 9);
imagetagging.assignmentduration = cell2mat(rawNumericColumns(:, 6));
imagetagging.autoapprovaldelay = cell2mat(rawNumericColumns(:, 7));
imagetagging.hitlifetime = rawCellColumns(:, 10);
imagetagging.viewhit = rawCellColumns(:, 11);
imagetagging.assignmentid = rawCellColumns(:, 12);
imagetagging.workerid = rawCellColumns(:, 13);
imagetagging.assignmentstatus = rawCellColumns(:, 14);
imagetagging.autoapprovaltime = rawCellColumns(:, 15);
imagetagging.assignmentaccepttime = rawCellColumns(:, 16);
imagetagging.assignmentsubmittime = rawCellColumns(:, 17);
imagetagging.assignmentapprovaltime = rawCellColumns(:, 18);
imagetagging.assignmentrejecttime = rawCellColumns(:, 19);
imagetagging.deadline = rawCellColumns(:, 20);
imagetagging.feedback = rawCellColumns(:, 21);
imagetagging.reject = rawCellColumns(:, 22);
imagetagging.Answertag1 = rawCellColumns(:, 23);

